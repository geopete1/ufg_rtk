function [Point,North,East,Elev,Code,HzPrec,VtPrec,PDOP,HDOP,VDOP,Sats,AntHeight,PtTime]=...
    rtkDataPrep01c_importUnified2(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [POINT,NORTH,EAST,ELEV,CODE,HZPREC,VTPREC,PDOP,HDOP,VDOP,SATS,ANTHEIGHT,DATETIME]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [POINT,NORTH,EAST,ELEV,CODE,HZPREC,VTPREC,PDOP,HDOP,VDOP,SATS,ANTHEIGHT,DATETIME]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Point,North,East,Elev,Code,HzPrec,VtPrec,PDOP,HDOP,VDOP,Sats,AntHeight,DateTime] = importfile('mtnzs_n_170908_r13.txt',3, 5991);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/09/27 14:26:49

%% Initialize variables.
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%15s%15s%13s%9s%14s%11s%8s%6s%5s%5s%5s%12s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{1} = strtrim(dataArray{1});
dataArray{5} = strtrim(dataArray{5});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,6,7,8,9,10,11,12]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{13} = datetime(dataArray{13}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{13} = cellfun(@(x) x(2:end-1), dataArray{13}, 'UniformOutput', false);
        dates{13} = datetime(dataArray{13}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{13} = repmat(datetime([NaN NaN NaN]), size(dataArray{13}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{13});
anyInvalidDates = isnan(dates{13}.Hour) - anyBlankDates;
dates = dates(:,13);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,6,7,8,9,10,11,12]);
rawCellColumns = raw(:, [1,5]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
Point = rawCellColumns(:, 1);
North = cell2mat(rawNumericColumns(:, 1));
East = cell2mat(rawNumericColumns(:, 2));
Elev = cell2mat(rawNumericColumns(:, 3));
Code = rawCellColumns(:, 2);
HzPrec = cell2mat(rawNumericColumns(:, 4));
VtPrec = cell2mat(rawNumericColumns(:, 5));
PDOP = cell2mat(rawNumericColumns(:, 6));
HDOP = cell2mat(rawNumericColumns(:, 7));
VDOP = cell2mat(rawNumericColumns(:, 8));
Sats = cell2mat(rawNumericColumns(:, 9));
AntHeight = cell2mat(rawNumericColumns(:, 10));
PtTime = dates{:, 1};

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% DateTime=datenum(DateTime);


%% Fix the elevation values by adding a geoid model

% Create a vector containg the easting, northing, and elevation values %
vec = [East North Elev];

% Convert the easting and northing values to lon/lat values. The geoid that
% we downloaded from online is in lat/lon, so our data needs to be in the
% same reference frame in order to interpolate it onto the geoid %

    % Function to convert from UTM to lat/lon requires a character vector
    % specifiying the UTM zone for each data point. Seems inefficient, but
    % such is life. %
    c = [];
    for ii = 1:length(vec)
        c = [c;'17 T'];
    end
    charvec = char(c);
    
    % Convert UTM to lat/lon using downloaded function utm2deg %
    [lat,lon] = utm2deg(vec(:,1),vec(:,2),c);

% Now, read in the geoid, and interpolate our data onto the geoid. This
% section of code was provided by Andrew Stevens at the USGS Pacific Marine
% Science Center, Sant Cruz, CA on 9/29/17 %

    % Read in the geoid model using function provided by Andrew Stevens
    % read_geoid. Geoid model is downloaded from online
    gmodel=read_geoid('g2012bu7.bin');

    % Interpolate the geoid model
    [gx,gy]=meshgrid(gmodel.lon,gmodel.lat');
    t=scatteredInterpolant(gx(:),gy(:),gmodel.data(:));

    % Evaluate geoid model at location of each of our data points
    gint=t(lon,lat);

% Calculate orthometric height
z_ortho=vec(:,3)-gint;

% Place the new values in the Elev variable 
Elev = z_ortho;
